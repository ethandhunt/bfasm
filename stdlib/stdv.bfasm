; Algorithms implemented from https://esolangs.org/wiki/Brainfuck_algorithms


.set %a %v
    > %a {[-]} {+} * %v

.setv %a %b
    ;a = b
    .calloc @.setv_temp0
    > %a {[-]}
    > %b {[} %a {+} @.setv_temp0 {+} %b {-]}
    > @.setv_temp0 {[} %b {+} @.setv_temp0 {-]}
    > @.setv_temp0 {[-]}
    free @.setv_temp0

.add %a %v
    > %a {+} * %v

.addv %a %b
    ;a = a + b
    .calloc @.addv_temp0
    > %a {[-]}
    > %b {[} %a {+} @.addv_temp0 {+} %b {-]}
    > @.addv_temp0 {[} %b {+} @.addv_temp0 {-]}
    > @.addv_temp0 {[-]}
    free @.addv_temp0

.subv %a %b
    ;a = a - b
    .calloc @.subv_temp0
    > %a {[-]}
    > %b {[} %a {+} @.subv_temp0 {+} %b {-]}
    > @.subv_temp0 {[} %b {+} @.subv_temp0 {-]}
    > @.subv_temp0 {[-]}
    free @.subv_temp0

.mulv %a %b
    ;a = a * b
    .calloc @.mulv_temp0
    .calloc @.mulv_temp1
    > %a {[}  @.mulv_temp1 {+} %a {-]}
    > @.mulv_temp1 {[} %b {[} %a {+} @.mulv_temp0 {+} %b {-]} @.mulv_temp0 {[} %b {+} @.mulv_temp0 {-]} @.mulv_temp1 {-]}
    free @.mulv_temp0 @.mulv_temp1

.sqrv %a
    ; a = a * a
    .calloc @.sqrv_temp0
    .calloc @.sqrv_temp1
    > %a {[} @.sqrv_temp0 {+} %a {-]}
    > @.sqrv_temp0 {[-[} @.sqrv_temp1 {+} %a {++} @.sqrv_temp0 {-]} %a {+} @.sqrv_temp1 {[} @.sqrv_temp0 {+} @.sqrv_temp1 {-]} @.sqrv_temp0 {]}
    free @.sqrv_temp0 @.sqrv_temp1

.divv %a %b
    ;a = a / b
    .calloc @.divv_temp0
    .calloc @.divv_temp1
    .calloc @.divv_temp2
    .calloc @.divv_temp3

    > %a {[} @.divv_temp0 {+} %a {-]}
    > @.divv_temp0 {[}
    > %b {[} @.divv_temp1 {+} @.divv_temp2 {+} %b {-]}
    > @.divv_temp2 {[} %b {+} @.divv_temp2 {-]}
    > @.divv_temp1 {[}
    > @.divv_temp2 {+}
    > @.divv_temp0 {-[} @.divv_temp2 {[-]} @.divv_temp3 {+} @.divv_temp0 {-]}
    > @.divv_temp3 {[} @.divv_temp0 {+} @.divv_temp3 {-]}
    > @.divv_temp2 {[}
    > @.divv_temp1 {-}
    > {[} %a {-} @.divv_temp1 {[-]]+}
    > @.divv_temp2 {-]}
    > @.divv_temp1 {-]}
    > %a {+}
    > @.divv_temp0 {]}
    free @.divv_temp0 @.divv_temp1 @.divv_temp2 @.divv_temp3

.powv %a %b
    ; a = a ^ b
    .calloc @.powv_temp0
    .calloc @.powv_temp1
    .calloc @.powv_temp2

    > %a {[} @.powv_temp0 {+} %a {-]}
    > %a {+}
    > %b {[}
    > @.powv_temp1 {[-]}
    > @.powv_temp2 {[-]}
    > %a {[} @.powv_temp2 {+} %a {-]}
    > @.powv_temp2 {[}
    > @.powv_temp0 {[} %a {+} @.powv_temp1 {+} @.powv_temp0 {-]}
    > @.powv_temp1 {[} @.powv_temp0 {+} @.powv_temp1 {-]}
    > @.powv_temp2 {-]}
    > %b {-]}
    free @.powv_temp0 @.powv_temp1 @.powv_temp2

.swpv %a %b
    ; a, b = b, a
    .calloc @.swpv_temp0

    > %a {[} @.swpv_temp0 {+} %a {-]}
    > %b {[} %a {+} %b {-]}
    > @.swpv_temp0 {[} %b {+} @.swpv_temp0 {-]}
    free @.swpv_temp0

.invv %a
    ; a = -a
    .calloc @.invv_temp0

    > %a {[} @.invv_temp0 {-} %a {-]}
    > @.invv_temp0 {[} %a {-} @.invv_temp0 {+]}
    free @.invv_temp0

.bitnotv %a
    ; a = not a (bitwise)
    .calloc @.bitnotv_temp0

    > %a {-}
    > {[} @.bitnotv_temp0 {-} %a {-]}
    > @.bitnotv_temp0 {[} %a {+} @.bitnotv_temp0 {-]}
    free @.bitnotv_temp0

.equv %a %b
    ; a = a == b
    ; 1 True
    ; 0 False
    .calloc @.equv_temp0
    .calloc @.equv_temp1

    > %a {[} @.equv_temp1 {+} %a {-]+}
    > %b {[} @.equv_temp1 {-} @.equv_temp0 {+} %b {-]}
    > @.equv_temp0 {[} %b {+} @.equv_temp0 {-]}
    > @.equv_temp1 {[} %a {-} @.equv_temp1 {[-]]}
    free @.equv_temp0 @.equv_temp1

.equdv %a %b
    ; a = a == b
    ; 1 True
    ; 0 False
    ; b is not preserved

    > %a {[-} %b {-} %a {]+} %b {[} %a {-} %b {[-]]} 

.neqv %a %b
    ; a = a != b
    ; 1 True
    ; 0 False
    .calloc @.neqv_temp0
    .calloc @.neqv_temp1

    > %a {[} @.neqv_temp1 {+} %a {-]}
    > %b {[} @.neqv_temp1 {-} @.neqv_temp0 {+} %b {-]}
    > @.neqv_temp0 {[} %b {+} @.neqv_temp0 {-]}
    > @.neqv_temp1 {[} %a {+} @.neqv_temp1 {[-]]}
    free @.neqv_temp0 @.neqv_temp1

.lesv %a %b
    ; a = a < b
    ; 1 True
    ; 0 False
    ; unsigned
    .calloc @.lesv_temp0
    occ @.lesv_temp1 $3
    > @.lesv_temp1 {[-]>[-]+>[-]<<}

    > %b {[} @.lesv_temp0 {+} @.lesv_temp1 {+} %b {-]}
    > @.lesv_temp0 {[} %b {+} @.lesv_temp0 {-]}
    > %a {[} @.lesv_temp0 {+} %a {-]+}
    > @.lesv_temp1 {[>-]>[<} %a {-} @.lesv_temp0 {[-]} @.lesv_temp1 {>->]<+<}
    > @.lesv_temp0 {[} @.lesv_temp1 {-[>-]>[<} %a {-} @.lesv_temp0 {[-]+} @.lesv_temp1 {>->]<+<} @.lesv_temp0 {-]}
    free @.lesv_temp0
    uoc @.lesv_temp1 $3

.leqv %a %b
    ; a = a <= b
    ; 1 True
    ; 0 False
    ; unsigned
    .calloc @.leqv_temp0
    occ @.leqv_temp1 $3
    > @.leqv_temp1 {[-]>[-]+>[-]<<}
    > %b {[} @.leqv_temp0 {+} @.leqv_temp1 {+} %b {-]}
    > @.leqv_temp1 {[} %b {+} @.leqv_temp1 {-]}
    > %a {[} @.leqv_temp1 {+} %a {-]}
    > @.leqv_temp1 {[>-]>[<} %a {+} @.leqv_temp0{[-]} @.leqv_temp1 {>->]<+<}
    > @.leqv_temp0 {[} @.leqv_temp1 {-[>-]>[<} %a {+} @.leqv_temp0 {[-]+} @.leqv_temp1 {>->]<+<} @.leqv_temp0 {-]}
    free @.leqv_temp0
    uoc @.leqv_temp1 $3

.zgtdv %c %a %b
    ; c = a > b
    ; b = b - a
    ; unsigned
    .calloc @.zgtv_temp0
    .calloc @.zgtv_temp1
    > %c {[-]}
    > %a {[} @.zgtv_temp0 {+}
    > %b {[-} @.zgtv_temp0 {[-]} @.zgtv_temp1 {+} %b {]}
    > @.zgtv_temp0 {[-} %c {+} @.zgtv_temp0 {]}
    > @.zgtv_temp1 {[-} %b {+} @.zgtv_temp1 {]}
    > %b {-} %a {-]}

.zgtv %c %a %b
    ; c = a > b
    ; unsigned
    .zgtdv %c %a %b
    .addv %b %a

.calloc %loc
    ; cancellating alloc
    ; sets loc to zero after allocating
    alloc %loc
    > %loc {[-]}
